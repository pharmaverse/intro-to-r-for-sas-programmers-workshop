---
title: "dplyr"
author: "Stefan Thoma"
format: html
editor: visual
---
The `tidyverse` is a collection of R packages designed for data science. It includes packages such as `ggplot2` for data visualization, `dplyr` for data manipulation, and `tidyr` for reshaping data. The `tidyverse` is built around the idea of "tidy data," which is a standardized way of organizing and structuring data for analysis. The packages in the `tidyverse` are designed to work together seamlessly, making it a popular choice for data scientists and analysts who use R.



## Setup

```{r}
library(tidyverse)
```


Read data

```{r}
adsl <- read_csv("data/adsl.csv")
```

We can have a look at the data using many different commands / functions, e.g. the `head()` function which gives us the first six observations:

```{r}
head(adsl)
```

## `dplyr`

`dplyr` is a package in the `tidyverse` that provides a set of functions for efficiently manipulating and cleaning data. 
It is built around the idea of "verbs" that correspond to common data manipulation tasks, such as `select()` for selecting specific columns from a data frame, `filter()` for filtering rows based on certain conditions, `arrange()` for sorting data-frames and `group_by()` and `summarize()` for grouping and summarizing data by one or more variables. 

`dplyr` is not strictly needed for any of that, everything can be done in base R. However, `dplyr` provides a framework to write readable code and a pipeline to work efficiently.

<!-- The most crucial aspect of the `dplyr` pipeline is the pipe command (%\>%). The pipe operator (ctrl shift m) uses the previously computed object and forwards it to the next function as the first argument. It can also be specified to be some other argument of the next function. Let's show a simple example: -->

<!-- ```{r} -->

<!-- vec <- 1:10 -->

<!-- # base: -->

<!-- mean(vec) -->

<!-- # dplyr: -->

<!-- vec %>% mean() -->

<!-- ``` -->

<!-- The pipe operator let's us write nested function calls in a sequential way. For example, we can calculate the rounded variance of the centered vector `vec`: -->

<!-- ```{r} -->

<!-- # base: -->

<!-- round(var(scale(vec, scale = FALSE)), digits = 2) -->

<!-- # dplyr: -->

<!-- vec %>%  -->

<!--   scale(scale = FALSE) %>%  -->

<!--   var() %>%  -->

<!--   round(digits = 2) -->

<!-- ``` -->

<!-- However, most often, the pipe takes a dataset (or a modified dataset) and forwards it into the next function as the data argument of the next function. -->


There are various functions within `dplyr` for datawrangling which follow a consistent structure. The first input of the most used `dplyr` functions is the data-frame. Then follow arguments specifying the behaviour of the function. Compared to the base r syntax we do not have to write column / variable names in quotation marks; `dplyr` syntax lets us refer to columns within a data-frame without the need to always reference the data-frame of origin.

### select

The `select` function lets us select all variables mentioned in the arguments (and drops all other variables). Alternatively, we can selectively drop variables if we place a minus (`-`) in front of the variable name.\
We can first have a look at all variable names of the data-frame:

```{r}
names(adsl)
```

And then select the desired variables:

```{r}
# dplyr::select
select(.data = adsl, 
       STUDYID, 
       USUBJID, 
       ARM, 
       AGE, 
       SEX, 
       RACE)
```

We end up with a new data-frame including only the selected variables. Note here that we do not save the resulting data-frame at the moment.

There are also some helper functions to use within the `select` function of `dplyr`. `starts_with()` `ends_with()` `num_range()`. They allow us to select multiple columns sharing a naming structure. `num_range()` let's us select consecutively numbered columns, e.g.: `num_range("example", 1:4)` would select the columns named: `r paste("example", 1:4, sep = "")`.

We can try out `starts_with()`:

```{r}
select(adsl,
       USUBJID, 
       starts_with("trt"))
```

And `ends_with()`:

```{r}
# in this df, all variables that contain dates end with "DT". 
# We can select them:
select(adsl,
       USUBJID, 
       ends_with("DT"))
```

If we want a data-frame that does not include any dates, we can make use of the minus sign in combination with the `ends_with()` function:

```{r}
select(adsl,
       -ends_with("DT")) 
```

::: {.callout-note appearance="simple"}
## Change order of variables

We can use the `select()` function to reorder the variables in the data-frame. This does not affect the order of rows.

```{r}
select(adsl,
         ARM, 
         USUBJID)
```
:::

### filter

The `filter` function allows us to look at a subset of observations. As input, the function requires a logical vector and (of course) a data-frame. This time, we first save the reduced (selected) data-frame and use that as the first argument to `filter`.

```{r}
selected_data <- select(adsl, 
                        STUDYID, 
                        USUBJID, 
                        ARM, 
                        AGE, 
                        SEX, 
                        RACE)
```

The logical vector is generally created within the function call and can use any of the following logic operators:

    <                less than
    <=               less than or equal to
    >                greater than
    >=               greater than or equal to
    ==               equal
    !=               not equal
    !x               not x (negation)
    x | y            x OR y
    x & y            x AND y
    x %in% y         logical vector of length x with TRUE if element of x is in y 

Within `filter`, we can chain logical vectors by separating them with a comma (`,`). Lets have a look at women that are 70 and older:

```{r}
filter(selected_data,
       AGE >= 70,
       SEX == "F")
```

Now we have a reduced data frame with female patients over 70. However, the nested call is not very intuitive to read. If any more functions get added to this code, it becomes even less readable. That is where the pipe operator (`%>%`) comes in.

::: {.callout-note appearance="simple"}
## pipe

The pipe operator let us chain multiple `dplyr` commands, so we can always forward the previously filtered / selected / arranged dataframe and keep working with it. The pipe operator let's us write nested function calls in a sequential way. Traditionally, we start a new line after every pipe operator.
:::

```{r}
# select, filter, & pipe:
adsl %>% # This pipe forwards adsl to the select function as its first argument
  select(STUDYID, 
         USUBJID,
         ARM, 
         AGE, 
         SEX, 
         RACE) %>% # this pipe forwards the selected variables to the filter function
  filter(AGE >= 70,
         SEX == "F")
```

There is another inline operator which can be very useful within the filter function; `%in%`. With this operator, we can select rows based on a prespecified vector of values. This can be useful if there are specified values (e.g., specific `USUBJID`) which we would like to look at.

```{r}
# we save 4 USUBJID's in a vector:
lookup_ids <- c("01-716-1151", "01-710-1443", "01-708-1184", "01-705-1186")


# and then create a logical vector which returns TRUE for every entry in the 
# USUBJID vector which are represented in the lookup_ids, and else FALSE
adsl$USUBJID %in% lookup_ids



# this approach can be used in the filter function: 
adsl %>% 
  select(STUDYID, USUBJID, ARM, AGE, SEX, RACE) %>% 
  filter(USUBJID %in% lookup_ids)
```

Note that within the `filter` function (and in all major `dplyr` functions) R looks for the requested variables first within the supplied data-frame and afterwards in the global environment.

### arrange

We can sort the dataframe with the arrange() function. It allows the sorting based on multiple variables. Note that the order of arranging variables determines the sorting hierarchy, so in this example we first order by `AGE` and

```{r}
 adsl %>% 
  select(STUDYID, USUBJID, ARM, AGE, SEX, RACE) %>% 
  filter(AGE >= 70,
         SEX == "F") %>% 
  arrange(ARM, AGE)
```

To sort by descending order, we can use the helper function `desc()` within `arrange()`:

```{r}
 adsl %>% 
  select(STUDYID, USUBJID, ARM, AGE, SEX, RACE) %>% 
  filter(AGE >= 70,
         SEX == "F") %>% 
  arrange(ARM, desc(AGE))
```
