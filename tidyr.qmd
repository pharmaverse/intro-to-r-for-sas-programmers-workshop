---
title: "tidyr"
author: "Zelos"
format: html
editor: visual
---

# Transposing Data

## Some Context

As we know, data can often be represented in several ways. Multiple observations of a variable can be organized by rows or by columns.

Table A.

| ID  | Pre | Post |
|-----|-----|------|
| x   | 1   | 2    |
| y   | 3   | 4    |

Table B.

| ID  | Time | Value |
|-----|------|-------|
| x   | Pre  | 1     |
| x   | Post | 2     |
| y   | Pre  | 3     |
| y   | Post | 4     |

When observations are spread along a row as multiple columns, we refer to the data as being in "wide" format (See Table A). When observations are spread along a column as multiple rows, we refer to the data as being in "long" format (See Table B). SDTM data for the most part generally adheres to the "long" structure, but as programmers we need to know how to work with both to suit our needs.

To get the desired shape of data, there are two useful functions from the `tidyr` package to make this transformation, aptly named: `pivot_longer()` and `pivot_wider()` . These can be seen as the R-equivalent of `proc transpose` in SAS.

## Setup

```{r, message = FALSE, warning = FALSE}
library(admiral)
library(admiral.test)
library(dplyr)
library(tidyr)

suppdm <- admiral.test::admiral_suppdm %>%
  select(USUBJID, QNAM, QVAL)

head(suppdm, 10)
```

As we see here, in our `SUPPDM` domain, the data is currently in the "long" format. If we wanted to transform the dataset such that each of the unique values of `QNAM` was their own column, we are looking to transpose the data from "long" to "wide". In this case, we use `pivot_wider()`.

```{r}
suppdm_wide <- suppdm %>% 
  pivot_wider(names_from = "QNAM", # assign column names based on QNAM
              values_from = "QVAL") # retrieve values from QVAL
suppdm_wide
```

Voila! This "wide" dataset may prove useful for joins (to be discussed later). But for now, let's pretend that this "wide" format is how our original data came to us in. If we wanted to take these respective flagging columns and turn them into a "long" format, we use `pivot_longer()`.

```{r}
suppdm_long <- suppdm_wide %>% 
  pivot_longer(cols = c("COMPLT16", "COMPLT24", "COMPLT8", "EFFICACY", "ITT", "SAFETY"), 
               names_to = "QNAM",
               values_to = "QVAL")
suppdm_long
```

As you can see, as we pivoted back, we didn't come up with an *exact* duplicate of our original `suppdm` dataframe. This is because the default of `pivot_longer()` is **not** to drop `NA` values, which can be modified with the `values_drop_na` function input, just one of the many powerful additional function inputs from both of these pivoting functions. `pivot_wider()` and `pivot_longer()` were designed to handle a variety of situations when transposing data in the most flexible of ways.

```{r}
suppdm_long <- suppdm_wide %>% 
  pivot_longer(cols = c("COMPLT16", "COMPLT24", "COMPLT8", "EFFICACY", "ITT", "SAFETY"), 
               names_to = "flag",
               values_to = "flag_value",
               values_drop_na = TRUE)
suppdm_long
```

Bonus Trick: The `names_to`/`values_to` function arguments can prove to be helpful as a renaming step during the data cleaning process too!

# Relational Data (Joins)

When a pair of tables need to be joined together, we have a variety of functions that can achieve such a task:

-   `left_join()`

-   `right_join()`

-   `full_join()`

-   `inner_join()`

The use of these functions is very similar to `proc sql` in SAS. `left_join()` will cover most of use cases and is demonstrated below:

```{r}
dm <- admiral.test::admiral_dm %>% 
  select(STUDYID, USUBJID, AGE, ARM)

dm_suppdm <- dm %>% 
  left_join(suppdm_wide, by = "USUBJID")

head(dm_suppdm)
```

The join can also be completed with different column names as long as you define the join-key relationship, demonstrated below:
```{r}
dummy1 <- data.frame(STUDYID = c("TRIALX", "TRIALX"),
                     USUBJID = c("1001", "1002"),
                     AGE = c(18, 22))

dummy2 <- data.frame(STUDYID = c("TRIALX", "TRIALX"),
                     SUBJECT = c("1001", "1002"),
                     SEX = c("M", "F"))

dummy3 <- dummy1 %>% 
  left_join(dummy2, by = c("STUDYID" = "STUDYID", "USUBJID" = "SUBJECT"))

head(dummy3)
```