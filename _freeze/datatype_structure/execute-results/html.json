{
  "hash": "16609efd5775e204ea6916e573038289",
  "result": {
    "markdown": "---\ntitle: \"datatype and structure\"\nauthor: \"Sadchla\"\nformat: html\neditor: visual\n---\n\n\n# Coding basics\n\n## R as a calculator\n\nR can be used as a calculator following the order of operations using the basic arithmetic operators, although, the arithmetic equal sign (`=`) in the equivalent of `==`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simple calculations \n3*2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n(59 + 73 + 2) / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 44.66667\n```\n:::\n\n```{.r .cell-code}\n# complex calculations\npi/8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3926991\n```\n:::\n:::\n\n\n# store outputs\n\nAn object can be created to assign the value of your operation to a specific variable name, which can be reused later in the R session. Using the `object_name <- value` naming convention, you can assign (`<-`) the value (`(59 + 73 + 2) / 3`) to an `object_name` simple_cal to look like `simple_cal <-(59 + 73 + 2) / 3` to store the evaluation of that calculation.\n\n# Load data into R\n\nDepending on the formats for the files containing your data, we can use different base R functions to read and load data into memory\n\nR has two native data formats, **Rdata** (sometimes call Rda) and **RDS**.\n\n**Rdata** can be selected R objects or a workspace, and **RDS** are single R object. R has base functions available to read the two native data formats, and some delimited files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Comma delimited\nadsl_CSV <- read.csv(\"data/adsl.csv\", header = TRUE)\n\n# Save CSV\nadsl_csv_save <- write.csv(adsl_CSV, \"data/save_data/adsl.csv\", row.names=TRUE)\n\n\nadsl_TAB_save <- write.table(adsl_CSV,\"data/save_data/adsl.txt\", append = FALSE, sep = \"\\t\", dec = \".\",\n            row.names = TRUE, col.names = TRUE)\n\n# Tab-delimited \nadsl_TAB <- read.table(\"data/save_data/adsl.txt\", header = TRUE, sep = \"\\t\")\n\n# saving rdata\nsave(adsl_CSV, file = \"data/adsl_1.RData\")\n# Save multiple objects\nsave(adsl_CSV, adsl_TAB, file = \"data/adsl_2.RData\")\n\n# Saving the entire workspake \nsave.image(file=\"adsl_program\")\n\n# We can follow the syntax for saving single Rdata object to save Rds files\n# saveRDS(object, file = \"my_data.rds\")\n\n\n# loading Rdata or Rda files \nload(file = \"data/adsl_2.RData\")\n\n# loading RDS\n# We can follow the syntax for read Rdata object to sread Rds files using the readRDS()\n```\n:::\n\n\n# R Packages\n\nR packages are a collection of reusable functions, compiled codes,documentation, sample data and tests. Some formats of data require the use of an R package in order to load that data into memory. Shareable R packages are typically stored in a repository such as the Comprehensive R Archive Network (CRAN), Bioconductor, and GitHub.\n\n# Installing an R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From CRAN\n#install.packages(\"insert_package_name\")\n# {haven} is used to import or export foreign statistical format files (SPSS, Stata, SAS)\n#install.packages(\"haven\")\n\n# {readxl}\n# install.packages(\"readxl\")\n\n\n# From Github\nremotes::install_github(\"pharmaverse/admiral\", ref = \"devel\")\n```\n:::\n\n\n# Using R package, functions from an R package, and accessing help page\n\nSince an R packages are a collection of functions, you can choose to load the entire package within R memory or just the needed function from that package. Usually, the order you choose to load your package does not make a difference, unless you are loading two or more packages that has functions with the same name. If you are loading two or more packages with common function name, then the package loaded last will hide that function in the earlier packages, so in that case is important to note the order you choose to load the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read file using ::\nadsl_sas1 <- haven::read_sas(\"data/adsl.sas7bdat\")\n\n# read file using library call  \nlibrary(haven)\nadsl_sas2 <- read_sas(\"data/adsl.sas7bdat\")\n\n\n# Reading Excel xls|xlsx files\n# read_excel reads both xls|xlsx files but read_xls and read_xlsx can also be used to read respective files\n\n# if NA are represented by another something other than blank then you can specified the NA value\n# within the read_excel() function\n```\n:::\n\n\n# Datatype\n\nR has different types of **Datatype**\\\n\\* Integer \\* numeric \\* Character \\* Logical \\* complex \\* raw\n\nBut we will focus on the top 4.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ntype_int <- (1:5) \ntype_num <- rnorm(5)\ntype_char <- \"USUBJID\"\ntype_logl_1 <- TRUE\ntype_logl_2 <- FALSE\n\n\nclass(type_int)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(type_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(type_logl_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(type_logl_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(type_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n# Date formats\n\nThere are base R functions that can be used to format a date object similar to the Date9 formatted date variable from SAS. We can also use that same function to format variables as yymmddn8, yymmddd10, yymmdds10, mmddyyd10, and mmddyys10. In addition, there are R packages available, such as {lubridate}, for more complex date/date time formatted objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using adsl_sas1 RFSTDTC\nclass(adsl_sas1$RFSTDTC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# Convert the date from that adsl_sas1 into a date variable\nadsl_sas1$RFSTDTC <- as.Date(adsl_sas1$RFSTDTC)\nclass(adsl_sas1$RFSTDTC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n:::\n\n\n# Structure\n\nData structures are dimensional ways of organizing the data. There are different data structures in R, let's focus on **vectors** and **dataframe**\n\n**Vectors** are 1 dimensional collection of data that can contain one or more element of the same data type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvect_1 <- 2\nvect_2 <- c(2, \"USUBJID\")\n\nclass(vect_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(vect_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n**Dataframe** is similar to SAS data sets and are 2 dimensional collection of vectors. Dataframe can store vectors of different types but must be of the same length\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(age = c(65, 20, 37,19,45),\n                 seq = (1:5),\n                 type_logl = c(TRUE,FALSE, TRUE, TRUE, FALSE),\n                 usubjid = c(\"001-940-9785\",\"002-950-9726\",\"003-940-9767\",\"004-940-9795\",\"005-940-9734\"))\n\n# str() provides the data structure for each object in the dataframe\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t5 obs. of  4 variables:\n $ age      : num  65 20 37 19 45\n $ seq      : int  1 2 3 4 5\n $ type_logl: logi  TRUE FALSE TRUE TRUE FALSE\n $ usubjid  : chr  \"001-940-9785\" \"002-950-9726\" \"003-940-9767\" \"004-940-9795\" ...\n```\n:::\n\n```{.r .cell-code}\n# In addition to the data structure per variable, also get some descriptive statistics \nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      age            seq    type_logl         usubjid         \n Min.   :19.0   Min.   :1   Mode :logical   Length:5          \n 1st Qu.:20.0   1st Qu.:2   FALSE:2         Class :character  \n Median :37.0   Median :3   TRUE :3         Mode  :character  \n Mean   :37.2   Mean   :3                                     \n 3rd Qu.:45.0   3rd Qu.:4                                     \n Max.   :65.0   Max.   :5                                     \n```\n:::\n:::\n",
    "supporting": [
      "datatype_structure_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}